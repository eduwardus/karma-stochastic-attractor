import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# ======================
# PARÁMETROS DEL MODELO
# ======================
N = 100                # Número de agentes
T = 100                # Tiempo total
dt = 0.1               # Paso de tiempo
steps = int(T / dt)    # Número de pasos

# Parámetros kármicos (ajustables)
kappa = 0.3            # Tasa de acumulación de mérito por altruismo
gamma_m = 0.1          # Disipación de mérito por desapego
epsilon = 0.05         # Erosión de mérito por aversión
eta_M = 0.2            # Eficacia de la meditación en sabiduría
mu = 0.05              # Degradación natural de la sabiduría
lambda_ = 0.01         # Corrupción de sabiduría por orgullo
theta = 2.0            # Intensidad de la avaricia (pretas)
alpha_P = 0.2          # Crecimiento de presión social (animales)
gamma_P = 0.05         # Reducción de presión social por sabiduría

# Ruido estocástico (sigma_X para cada variable)
sigma = {
    'A': 0.1,  # Altruismo
    'V': 0.2,  # Vulnerabilidad
    'I': 0.15  # Influencia
}

# ======================
# INICIALIZACIÓN
# ======================
# Arrays para almacenar trayectorias
m = np.random.exponential(1, N)       # Mérito inicial (distribución positiva)
w = np.random.normal(10, 2, N)        # Sabiduría inicial
A = np.random.uniform(1, 5, N)        # Altruismo inicial
V = np.random.beta(1, 3, N) * 10      # Vulnerabilidad inicial
I = np.random.rand(N) * 5             # Influencia inicial
P = np.random.rand(N) * 20            # Presión social inicial
E = np.random.rand(N)                 # Empatía inicial

# Matriz de acoplamiento (red aleatoria)
C = np.random.choice([0, 0.2], size=(N, N), p=[0.7, 0.3])
np.fill_diagonal(C, 0)  # Eliminar auto-conexiones

# ======================
# FUNCIONES AUXILIARES
# ======================
def avaricia(m_i, m0=5):
    """Función de avaricia (pretas)"""
    return 1 / (1 + np.exp(-0.5 * (m_i - m0)))

def meditacion(w_i):
    """Tasa de meditación (depende de la sabiduría actual)"""
    return np.tanh(w_i / 10)

# ======================
# SIMULACIÓN (EULER-MARUYAMA)
# ======================
for t in range(steps):
    # Calcular derivadas
    dm = kappa * A - gamma_m * m * (1 + np.tanh(w)) - epsilon * V * m
    dw = eta_M * meditacion(w) - mu * w - lambda_ * I * w
    dA = (0.1 * A + 0.4 * A * np.tanh(m) - 0.05 * w * A) * dt + sigma['A'] * A * norm.rvs(0, dt, N)
    dV = (0.1 * V + 0.3 * V * E - 0.05 * w * V + theta * avaricia(m)) * dt + sigma['V'] * V * norm.rvs(0, dt, N)
    dI = (0.1 * I + 0.2 * np.tanh(I * P) + 0.3 * (C @ I - I) - 0.05 * w * I) * dt + sigma['I'] * I * norm.rvs(0, dt, N)
    dP = alpha_P * P + np.sum(C * np.sign(P[:, None] - P), axis=1) - gamma_P * w * P
    dE = 0.1 * E + 0.4 * (V * E) / (1 + V) - 0.05 * w * E
    
    # Actualizar variables (método de Euler)
    m += dm * dt
    w += dw * dt
    A += dA
    V += dV
    I += dI
    P += dP * dt
    E += dE * dt
    
    # Aplicar condiciones de contorno
    m = np.clip(m, 0, 100)
    w = np.clip(w, 0, None)
    A = np.clip(A, 0, None)
    V = np.clip(V, 0, 100)
    I = np.clip(I, 0, None)
    P = np.clip(P, 0, None)
    E = np.clip(E, 0, 1)

# ======================
# VISUALIZACIÓN
# ======================
plt.figure(figsize=(15, 10))

# 1. Evolución de variables individuales (agente 0)
plt.subplot(2, 2, 1)
plt.plot(np.linspace(0, T, steps), m[0], label='Mérito (m)')
plt.plot(np.linspace(0, T, steps), w[0], label='Sabiduría (w)')
plt.xlabel('Tiempo')
plt.ylabel('Valor')
plt.title('Trayectoria de un Agente')
plt.legend()

# 2. Distribución de reinos al tiempo final
plt.subplot(2, 2, 2)
plt.scatter(m, w, c=V, cmap='viridis', alpha=0.6)
plt.colorbar(label='Vulnerabilidad (V)')
plt.xlabel('Mérito (m)')
plt.ylabel('Sabiduría (w)')
plt.title('Distribución de Agentes en los Reinos')

# 3. Red de influencias (I_i)
plt.subplot(2, 2, 3)
plt.scatter(P, I, c=m, cmap='plasma', alpha=0.7)
plt.colorbar(label='Mérito (m)')
plt.xlabel('Presión Social (P)')
plt.ylabel('Influencia (I)')
plt.title('Influencia vs. Presión Social')

# 4. Histograma de sabiduría
plt.subplot(2, 2, 4)
plt.hist(w, bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Sabiduría (w)')
plt.ylabel('Frecuencia')
plt.title('Distribución de Sabiduría')

plt.tight_layout()
plt.show()
